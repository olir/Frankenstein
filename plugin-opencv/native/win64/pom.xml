<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
      <groupId>de.serviceflow.frankenstein.plugin.opencv</groupId>
      <artifactId>jniplugin-native</artifactId>
      <version>0.3.4-SNAPSHOT</version>
    </parent>

    <groupId>de.serviceflow.frankenstein.plugin.opencv</groupId>
    <artifactId>plugin-opencv-win64</artifactId>
    <version>0.3.4-SNAPSHOT</version>
    <packaging>dll</packaging>

    <name>OpenCV Filters - Native parts - win64</name>
    <!-- Credits to http://www.tricoder.net/blog/?p=197 -->

  <dependencies>
    <dependency>
    <groupId>de.serviceflow.frankenstein.plugin.opencv</groupId>
    <artifactId>plugin-opencv</artifactId>
    <version>0.3.4-SNAPSHOT</version>
    <type>jar</type>
    <scope>compile</scope>
    </dependency>   
  </dependencies>
  
  <build>
    <plugins>
        
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>1.6.0</version>
          <configuration>
            <skip>true</skip>
            <executable>${env.JAVA_HOME}/bin/java</executable>
          </configuration>
        </plugin>        
  
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>native-maven-plugin</artifactId>
          <version>1.0-alpha-8</version>
          <extensions>true</extensions>
          <configuration>
                  <!--  trigger javah with win32 architecture -->
                  <javahOS>win32</javahOS>
                  <compilerProvider>generic-classic</compilerProvider>
                  <compilerExecutable>g++</compilerExecutable>
                  <linkerExecutable>g++</linkerExecutable>
                  <sources>
                    <source>
                      <directory>../src/main/native</directory>
                      <includes>
                        <include>**/*.cpp</include>
                      </includes>
                    </source>
                  </sources>
                  <!-- used -m64 for mingw64 compiler/linker. may not work with 32-bit mingw -->
                  <compilerStartOptions>
                   <compilerStartOption>-m64 -I..\include</compilerStartOption>
                    </compilerStartOptions>
                  <linkerStartOptions>
                   <linkerStartOption>-shared -m64 -Wl,--kill-at,--add-stdcall-alias -static</linkerStartOption><!-- -static-libgcc -static-libstdc++  -lwinpthread -->
                    </linkerStartOptions>

                          </configuration>
                          
                    <executions>
                    <execution>
                   <id>javah</id>
                   <phase>generate-sources</phase>
               <configuration>
                <javahOS>win32</javahOS>
                <javahProvider>default</javahProvider>
                <javahOutputDirectory>${project.build.directory}/custom-javah</javahOutputDirectory>
                <workingDirectory>${basedir}</workingDirectory>
                <javahOutputFileName>nativeCode.h</javahOutputFileName>
                <javahClassNames>
                  <javahClassName>de.serviceflow.frankenstein.plugin.opencv.jni.NativeExample</javahClassName>
                  <javahClassName>de.serviceflow.frankenstein.plugin.opencv.jni.VideoEqualizer</javahClassName>
                  <javahClassName>de.serviceflow.frankenstein.plugin.opencv.jni.ExternalSample</javahClassName>
                </javahClassNames>
               </configuration>
               <goals>
               <goal>javah</goal>
               </goals>
             </execution>
              </executions>               
            </plugin>

            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-antrun-plugin</artifactId>
              <version>1.4</version>
              <executions>
                <execution>
                <phase>initialize</phase>
                <configuration>

                  <tasks>
                  <mkdir dir="./target/objs"/>
                  </tasks>

                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                </execution>

                </executions>
            </plugin>
      
      
        </plugins>
    </build>
</project>
            
