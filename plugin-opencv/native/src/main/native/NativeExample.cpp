#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <cmath>

#include "nativeCode.h" // generated by javah via maven-native-plugin

#include "JwMat.h"
#include "jni_helper.h"
#include "cv_helper.h"

using namespace std;

JNIEXPORT void JNICALL Java_de_serviceflow_frankenstein_plugin_opencv_jni_NativeExample_init
  (JNIEnv* env, jobject obj)
{
  JwMat* mat = JwMat::matptr;
  if (mat == NULL) {
	 JwMat::matptr = new JwMat(env);
  }
}

JNIEXPORT void JNICALL Java_de_serviceflow_frankenstein_plugin_opencv_jni_NativeExample_process
  (JNIEnv* env, jobject obj,
   jobject matobj, jint frameId, jobject context, jint keyHue, jint range, jint satmin)
{
  JwMat* mat = JwMat::matptr;
  int cols = mat->cols(env, matobj);
  int rows = mat->rows(env, matobj);
//  cout << "rows=" << rows << ", cols=" << cols << endl;

  int channels = mat->channels(env, matobj);
  if (channels<3) {
	  J_THROW("java/lang/Error", "Expecting HSV Mat. channels < 3: "+mat->channels(env, matobj));
      return;
  }

  // keyHue := [0,359]
  
  int saturation = 60;
  int keyHueB = keyHue >> 1;
  
  for(int y = 0; y < rows; y++)
  {
	  jbyte * rowaddr = ROW_ADDR(env, matobj,mat,y);

	  for (int x = 0; x < cols; x++)
	  {
		  int i = x * channels;

    // OpenCV: For HSV, Hue range is [0,255] mapped to [0,359], Saturation range is [0,255] and Value range is [0,255].
		  int h = (unsigned char)rowaddr[i] * 359 / 255;
		  int s = (unsigned char)rowaddr[i+1];
		  int v = (unsigned char)rowaddr[i+2];

      int hlower = keyHue - range;
      int hupper = keyHue + range;

      if (s<satmin) {
          s = 0;
      }
      else if ( (h > hlower && h < hupper) || (hlower<0 && h>360+hlower) || (hupper>360 && h<hupper-360))
      {
        int distance = keyHue - h;
        if (distance<0)
          distance = -distance;
        if (distance>180)
          distance  = 360 - distance;
        
        s = s * sqrt(10000*(range-distance)/range)/100;
      }
      else
      {
        s = 0;
      }
      
		  rowaddr[i+1] = s; // save result
	  }
  }

}

